//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace MissFrame.Cfg
{ 

public sealed partial class CfgTweenMoveData :  Bright.Config.BeanBase 
{
    public CfgTweenMoveData(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["rootTargetName"].IsString) { throw new SerializationException(); }  RootTargetName = _json["rootTargetName"]; }
        { if(!_json["relativeTargetPath"].IsString) { throw new SerializationException(); }  RelativeTargetPath = _json["relativeTargetPath"]; }
        { if(!_json["rootOperaName"].IsString) { throw new SerializationException(); }  RootOperaName = _json["rootOperaName"]; }
        { if(!_json["relativeOperaPath"].IsString) { throw new SerializationException(); }  RelativeOperaPath = _json["relativeOperaPath"]; }
        { if(!_json["duration"].IsNumber) { throw new SerializationException(); }  Duration = _json["duration"]; }
        PostInit();
    }

    public CfgTweenMoveData(int id, string desc, string rootTargetName, string relativeTargetPath, string rootOperaName, string relativeOperaPath, float duration ) 
    {
        this.Id = id;
        this.Desc = desc;
        this.RootTargetName = rootTargetName;
        this.RelativeTargetPath = relativeTargetPath;
        this.RootOperaName = rootOperaName;
        this.RelativeOperaPath = relativeOperaPath;
        this.Duration = duration;
        PostInit();
    }

    public static CfgTweenMoveData DeserializeCfgTweenMoveData(JSONNode _json)
    {
        return new Cfg.CfgTweenMoveData(_json);
    }

    public int Id { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 目标对象的根名称
    /// </summary>
    public string RootTargetName { get; private set; }
    /// <summary>
    /// 相对于根对象的路径
    /// </summary>
    public string RelativeTargetPath { get; private set; }
    /// <summary>
    /// 操作对象的根名称
    /// </summary>
    public string RootOperaName { get; private set; }
    /// <summary>
    /// 相对于根对象的路径
    /// </summary>
    public string RelativeOperaPath { get; private set; }
    /// <summary>
    /// 所需时间
    /// </summary>
    public float Duration { get; private set; }

    public const int __ID__ = -2045574868;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Desc:" + Desc + ","
        + "RootTargetName:" + RootTargetName + ","
        + "RelativeTargetPath:" + RelativeTargetPath + ","
        + "RootOperaName:" + RootOperaName + ","
        + "RelativeOperaPath:" + RelativeOperaPath + ","
        + "Duration:" + Duration + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
