//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace MissFrame.Cfg
{ 

public sealed partial class CfgTweenLookAtData :  Bright.Config.BeanBase 
{
    public CfgTweenLookAtData(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["rootTargetName"].IsString) { throw new SerializationException(); }  RootTargetName = _json["rootTargetName"]; }
        { if(!_json["targetRelativePath"].IsString) { throw new SerializationException(); }  TargetRelativePath = _json["targetRelativePath"]; }
        { if(!_json["operaRootName"].IsString) { throw new SerializationException(); }  OperaRootName = _json["operaRootName"]; }
        { if(!_json["operaRelativePath"].IsString) { throw new SerializationException(); }  OperaRelativePath = _json["operaRelativePath"]; }
        { if(!_json["duration"].IsNumber) { throw new SerializationException(); }  Duration = _json["duration"]; }
        PostInit();
    }

    public CfgTweenLookAtData(int id, string desc, string rootTargetName, string targetRelativePath, string operaRootName, string operaRelativePath, float duration ) 
    {
        this.Id = id;
        this.Desc = desc;
        this.RootTargetName = rootTargetName;
        this.TargetRelativePath = targetRelativePath;
        this.OperaRootName = operaRootName;
        this.OperaRelativePath = operaRelativePath;
        this.Duration = duration;
        PostInit();
    }

    public static CfgTweenLookAtData DeserializeCfgTweenLookAtData(JSONNode _json)
    {
        return new Cfg.CfgTweenLookAtData(_json);
    }

    public int Id { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 看向对象的根名称
    /// </summary>
    public string RootTargetName { get; private set; }
    /// <summary>
    /// 相对于根对象的路径
    /// </summary>
    public string TargetRelativePath { get; private set; }
    /// <summary>
    /// 操作对象的根名称
    /// </summary>
    public string OperaRootName { get; private set; }
    /// <summary>
    /// 相对于根对象的路径
    /// </summary>
    public string OperaRelativePath { get; private set; }
    /// <summary>
    /// 所需时间
    /// </summary>
    public float Duration { get; private set; }

    public const int __ID__ = -1155362867;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Desc:" + Desc + ","
        + "RootTargetName:" + RootTargetName + ","
        + "TargetRelativePath:" + TargetRelativePath + ","
        + "OperaRootName:" + OperaRootName + ","
        + "OperaRelativePath:" + OperaRelativePath + ","
        + "Duration:" + Duration + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
