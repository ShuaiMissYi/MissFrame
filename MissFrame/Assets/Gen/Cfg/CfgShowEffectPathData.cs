//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace MissFrame.Cfg
{ 

public sealed partial class CfgShowEffectPathData :  Bright.Config.BeanBase 
{
    public CfgShowEffectPathData(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["effectResID"].IsNumber) { throw new SerializationException(); }  EffectResID = _json["effectResID"]; }
        { if(!_json["creatNum"].IsNumber) { throw new SerializationException(); }  CreatNum = _json["creatNum"]; }
        { if(!_json["interval"].IsNumber) { throw new SerializationException(); }  Interval = _json["interval"]; }
        { if(!_json["duration"].IsNumber) { throw new SerializationException(); }  Duration = _json["duration"]; }
        { var __json0 = _json["pathPointArray"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; PathPointArray = new UnityEngine.Vector3[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  PathPointArray[__index0++] = __v0; }   }
        PostInit();
    }

    public CfgShowEffectPathData(int id, string desc, int effectResID, int creatNum, float interval, float duration, UnityEngine.Vector3[] pathPointArray ) 
    {
        this.Id = id;
        this.Desc = desc;
        this.EffectResID = effectResID;
        this.CreatNum = creatNum;
        this.Interval = interval;
        this.Duration = duration;
        this.PathPointArray = pathPointArray;
        PostInit();
    }

    public static CfgShowEffectPathData DeserializeCfgShowEffectPathData(JSONNode _json)
    {
        return new Cfg.CfgShowEffectPathData(_json);
    }

    /// <summary>
    /// 标识id
    /// </summary>
    public int Id { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 特效对象ID(对应Resources-ResPrefabAsset)
    /// </summary>
    public int EffectResID { get; private set; }
    /// <summary>
    /// 生成数量
    /// </summary>
    public int CreatNum { get; private set; }
    /// <summary>
    /// 生成特效点的间隔时间
    /// </summary>
    public float Interval { get; private set; }
    /// <summary>
    /// 跑完全程所需要的时间
    /// </summary>
    public float Duration { get; private set; }
    /// <summary>
    /// 路径点
    /// </summary>
    public UnityEngine.Vector3[] PathPointArray { get; private set; }

    public const int __ID__ = 497701815;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Desc:" + Desc + ","
        + "EffectResID:" + EffectResID + ","
        + "CreatNum:" + CreatNum + ","
        + "Interval:" + Interval + ","
        + "Duration:" + Duration + ","
        + "PathPointArray:" + Bright.Common.StringUtil.CollectionToString(PathPointArray) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
