//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace MissFrame.Cfg
{ 

public sealed partial class CfgActiveData :  Bright.Config.BeanBase 
{
    public CfgActiveData(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  Id = _json["id"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  Desc = _json["desc"]; }
        { if(!_json["rootName"].IsString) { throw new SerializationException(); }  RootName = _json["rootName"]; }
        { if(!_json["relativePath"].IsString) { throw new SerializationException(); }  RelativePath = _json["relativePath"]; }
        { if(!_json["isActive"].IsBoolean) { throw new SerializationException(); }  IsActive = _json["isActive"]; }
        PostInit();
    }

    public CfgActiveData(int id, string desc, string rootName, string relativePath, bool isActive ) 
    {
        this.Id = id;
        this.Desc = desc;
        this.RootName = rootName;
        this.RelativePath = relativePath;
        this.IsActive = isActive;
        PostInit();
    }

    public static CfgActiveData DeserializeCfgActiveData(JSONNode _json)
    {
        return new Cfg.CfgActiveData(_json);
    }

    public int Id { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 对象的根对象名称
    /// </summary>
    public string RootName { get; private set; }
    /// <summary>
    /// 相对于根对象的路径
    /// </summary>
    public string RelativePath { get; private set; }
    public bool IsActive { get; private set; }

    public const int __ID__ = 258657034;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "Id:" + Id + ","
        + "Desc:" + Desc + ","
        + "RootName:" + RootName + ","
        + "RelativePath:" + RelativePath + ","
        + "IsActive:" + IsActive + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
